/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AffidavitRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createAffidavit"
      | "getAffidavit"
      | "getAffidavitCount"
      | "getUserAffidavits"
      | "getWitnesses"
      | "revokeAffidavit"
      | "verifyAffidavit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AffidavitCreated" | "AffidavitRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createAffidavit",
    values: [
      string,
      string,
      string,
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffidavit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffidavitCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAffidavits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWitnesses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAffidavit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAffidavit",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAffidavit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffidavit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffidavitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAffidavits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWitnesses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAffidavit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAffidavit",
    data: BytesLike
  ): Result;
}

export namespace AffidavitCreatedEvent {
  export type InputTuple = [
    affidavitId: string,
    issuer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    affidavitId: string,
    issuer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    affidavitId: string;
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AffidavitRevokedEvent {
  export type InputTuple = [
    affidavitId: string,
    issuer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    affidavitId: string,
    issuer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    affidavitId: string;
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AffidavitRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AffidavitRegistry;
  waitForDeployment(): Promise<this>;

  interface: AffidavitRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAffidavit: TypedContractMethod<
    [
      _affidavitId: string,
      _title: string,
      _category: string,
      _description: string,
      _declaration: string,
      _issuer: AddressLike,
      _seller: AddressLike,
      _buyer: AddressLike,
      _witnessIds: string[],
      _ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;

  getAffidavit: TypedContractMethod<
    [_affidavitId: string],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        affidavitId: string;
        title: string;
        category: string;
        description: string;
        declaration: string;
        issuer: string;
        seller: string;
        buyer: string;
        ipfsHash: string;
        timestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getAffidavitCount: TypedContractMethod<[], [bigint], "view">;

  getUserAffidavits: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getWitnesses: TypedContractMethod<[_affidavitId: string], [string[]], "view">;

  revokeAffidavit: TypedContractMethod<
    [_affidavitId: string],
    [void],
    "nonpayable"
  >;

  verifyAffidavit: TypedContractMethod<
    [_affidavitId: string],
    [[boolean, boolean] & { exists: boolean; isActive: boolean }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAffidavit"
  ): TypedContractMethod<
    [
      _affidavitId: string,
      _title: string,
      _category: string,
      _description: string,
      _declaration: string,
      _issuer: AddressLike,
      _seller: AddressLike,
      _buyer: AddressLike,
      _witnessIds: string[],
      _ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAffidavit"
  ): TypedContractMethod<
    [_affidavitId: string],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        affidavitId: string;
        title: string;
        category: string;
        description: string;
        declaration: string;
        issuer: string;
        seller: string;
        buyer: string;
        ipfsHash: string;
        timestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAffidavitCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAffidavits"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWitnesses"
  ): TypedContractMethod<[_affidavitId: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "revokeAffidavit"
  ): TypedContractMethod<[_affidavitId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyAffidavit"
  ): TypedContractMethod<
    [_affidavitId: string],
    [[boolean, boolean] & { exists: boolean; isActive: boolean }],
    "view"
  >;

  getEvent(
    key: "AffidavitCreated"
  ): TypedContractEvent<
    AffidavitCreatedEvent.InputTuple,
    AffidavitCreatedEvent.OutputTuple,
    AffidavitCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AffidavitRevoked"
  ): TypedContractEvent<
    AffidavitRevokedEvent.InputTuple,
    AffidavitRevokedEvent.OutputTuple,
    AffidavitRevokedEvent.OutputObject
  >;

  filters: {
    "AffidavitCreated(string,address,uint256)": TypedContractEvent<
      AffidavitCreatedEvent.InputTuple,
      AffidavitCreatedEvent.OutputTuple,
      AffidavitCreatedEvent.OutputObject
    >;
    AffidavitCreated: TypedContractEvent<
      AffidavitCreatedEvent.InputTuple,
      AffidavitCreatedEvent.OutputTuple,
      AffidavitCreatedEvent.OutputObject
    >;

    "AffidavitRevoked(string,address,uint256)": TypedContractEvent<
      AffidavitRevokedEvent.InputTuple,
      AffidavitRevokedEvent.OutputTuple,
      AffidavitRevokedEvent.OutputObject
    >;
    AffidavitRevoked: TypedContractEvent<
      AffidavitRevokedEvent.InputTuple,
      AffidavitRevokedEvent.OutputTuple,
      AffidavitRevokedEvent.OutputObject
    >;
  };
}
