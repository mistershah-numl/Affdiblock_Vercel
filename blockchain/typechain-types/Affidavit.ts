/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Affidavit {
  export type AffidavitDataStruct = {
    displayId: string;
    title: string;
    category: string;
    issuerId: string;
    issuerIdCardNumber: string;
    partyIds: string[];
    partyIdCardNumbers: string[];
    witnessNames: string[];
    witnessIdCardNumbers: string[];
    status: string;
    timestamp: BigNumberish;
  };

  export type AffidavitDataStructOutput = [
    displayId: string,
    title: string,
    category: string,
    issuerId: string,
    issuerIdCardNumber: string,
    partyIds: string[],
    partyIdCardNumbers: string[],
    witnessNames: string[],
    witnessIdCardNumbers: string[],
    status: string,
    timestamp: bigint
  ] & {
    displayId: string;
    title: string;
    category: string;
    issuerId: string;
    issuerIdCardNumber: string;
    partyIds: string[];
    partyIdCardNumbers: string[];
    witnessNames: string[];
    witnessIdCardNumbers: string[];
    status: string;
    timestamp: bigint;
  };
}

export interface AffidavitInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "affidavitExists"
      | "affidavits"
      | "getAffidavit"
      | "storeAffidavit"
      | "updateAffidavitStatus"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AffidavitStored"): EventFragment;

  encodeFunctionData(
    functionFragment: "affidavitExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "affidavits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAffidavit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeAffidavit",
    values: [
      string,
      string,
      string,
      string,
      string,
      string[],
      string[],
      string[],
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAffidavitStatus",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "affidavitExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "affidavits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAffidavit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeAffidavit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAffidavitStatus",
    data: BytesLike
  ): Result;
}

export namespace AffidavitStoredEvent {
  export type InputTuple = [
    displayId: string,
    status: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    displayId: string,
    status: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    displayId: string;
    status: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Affidavit extends BaseContract {
  connect(runner?: ContractRunner | null): Affidavit;
  waitForDeployment(): Promise<this>;

  interface: AffidavitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  affidavitExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  affidavits: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, bigint] & {
        displayId: string;
        title: string;
        category: string;
        issuerId: string;
        issuerIdCardNumber: string;
        status: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getAffidavit: TypedContractMethod<
    [_displayId: string],
    [Affidavit.AffidavitDataStructOutput],
    "view"
  >;

  storeAffidavit: TypedContractMethod<
    [
      _displayId: string,
      _title: string,
      _category: string,
      _issuerId: string,
      _issuerIdCardNumber: string,
      _partyIds: string[],
      _partyIdCardNumbers: string[],
      _witnessNames: string[],
      _witnessIdCardNumbers: string[],
      _status: string
    ],
    [void],
    "nonpayable"
  >;

  updateAffidavitStatus: TypedContractMethod<
    [_displayId: string, _status: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "affidavitExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "affidavits"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, string, string, bigint] & {
        displayId: string;
        title: string;
        category: string;
        issuerId: string;
        issuerIdCardNumber: string;
        status: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAffidavit"
  ): TypedContractMethod<
    [_displayId: string],
    [Affidavit.AffidavitDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "storeAffidavit"
  ): TypedContractMethod<
    [
      _displayId: string,
      _title: string,
      _category: string,
      _issuerId: string,
      _issuerIdCardNumber: string,
      _partyIds: string[],
      _partyIdCardNumbers: string[],
      _witnessNames: string[],
      _witnessIdCardNumbers: string[],
      _status: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAffidavitStatus"
  ): TypedContractMethod<
    [_displayId: string, _status: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AffidavitStored"
  ): TypedContractEvent<
    AffidavitStoredEvent.InputTuple,
    AffidavitStoredEvent.OutputTuple,
    AffidavitStoredEvent.OutputObject
  >;

  filters: {
    "AffidavitStored(string,string,uint256)": TypedContractEvent<
      AffidavitStoredEvent.InputTuple,
      AffidavitStoredEvent.OutputTuple,
      AffidavitStoredEvent.OutputObject
    >;
    AffidavitStored: TypedContractEvent<
      AffidavitStoredEvent.InputTuple,
      AffidavitStoredEvent.OutputTuple,
      AffidavitStoredEvent.OutputObject
    >;
  };
}
