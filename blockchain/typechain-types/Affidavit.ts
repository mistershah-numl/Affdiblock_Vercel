/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Affidavit {
  export type PartyStruct = {
    role: string;
    name: string;
    idCardNumber: string;
    userAddress: AddressLike;
  };

  export type PartyStructOutput = [
    role: string,
    name: string,
    idCardNumber: string,
    userAddress: string
  ] & { role: string; name: string; idCardNumber: string; userAddress: string };

  export type WitnessStruct = {
    name: string;
    idCardNumber: string;
    userAddress: AddressLike;
  };

  export type WitnessStructOutput = [
    name: string,
    idCardNumber: string,
    userAddress: string
  ] & { name: string; idCardNumber: string; userAddress: string };

  export type AffidavitDataStruct = {
    affidavitId: string;
    title: string;
    category: string;
    issuerName: string;
    issuerIdCardNumber: string;
    dateRequested: BigNumberish;
    dateIssued: BigNumberish;
    status: string;
    parties: Affidavit.PartyStruct[];
    witnesses: Affidavit.WitnessStruct[];
    documentHashes: string[];
    description: string;
    declaration: string;
  };

  export type AffidavitDataStructOutput = [
    affidavitId: string,
    title: string,
    category: string,
    issuerName: string,
    issuerIdCardNumber: string,
    dateRequested: bigint,
    dateIssued: bigint,
    status: string,
    parties: Affidavit.PartyStructOutput[],
    witnesses: Affidavit.WitnessStructOutput[],
    documentHashes: string[],
    description: string,
    declaration: string
  ] & {
    affidavitId: string;
    title: string;
    category: string;
    issuerName: string;
    issuerIdCardNumber: string;
    dateRequested: bigint;
    dateIssued: bigint;
    status: string;
    parties: Affidavit.PartyStructOutput[];
    witnesses: Affidavit.WitnessStructOutput[];
    documentHashes: string[];
    description: string;
    declaration: string;
  };
}

export interface AffidavitInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "affidavitId"
      | "category"
      | "createAffidavit"
      | "createdAt"
      | "dateIssued"
      | "dateRequested"
      | "declaration"
      | "description"
      | "documentHashes"
      | "getAffidavitBasicInfo"
      | "getAffidavitDetails"
      | "getAffidavitParticipants"
      | "issuer"
      | "issuerIdCardNumber"
      | "issuerName"
      | "parties"
      | "status"
      | "title"
      | "witnesses"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AffidavitCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "affidavitId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "category", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAffidavit",
    values: [Affidavit.AffidavitDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dateIssued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dateRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "declaration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "documentHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffidavitBasicInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAffidavitDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAffidavitParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issuerIdCardNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issuerName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "witnesses",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "affidavitId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "category", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAffidavit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dateIssued", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dateRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declaration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "documentHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffidavitBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffidavitDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffidavitParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuerIdCardNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuerName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parties", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "witnesses", data: BytesLike): Result;
}

export namespace AffidavitCreatedEvent {
  export type InputTuple = [
    affidavitId: string,
    issuer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    affidavitId: string,
    issuer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    affidavitId: string;
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Affidavit extends BaseContract {
  connect(runner?: ContractRunner | null): Affidavit;
  waitForDeployment(): Promise<this>;

  interface: AffidavitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  affidavitId: TypedContractMethod<[], [string], "view">;

  category: TypedContractMethod<[], [string], "view">;

  createAffidavit: TypedContractMethod<
    [affidavitData: Affidavit.AffidavitDataStruct],
    [void],
    "payable"
  >;

  createdAt: TypedContractMethod<[], [bigint], "view">;

  dateIssued: TypedContractMethod<[], [bigint], "view">;

  dateRequested: TypedContractMethod<[], [bigint], "view">;

  declaration: TypedContractMethod<[], [string], "view">;

  description: TypedContractMethod<[], [string], "view">;

  documentHashes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAffidavitBasicInfo: TypedContractMethod<
    [],
    [[string, string, string, string, string, bigint, bigint, string]],
    "view"
  >;

  getAffidavitDetails: TypedContractMethod<
    [],
    [[string, string, string, bigint]],
    "view"
  >;

  getAffidavitParticipants: TypedContractMethod<
    [],
    [
      [Affidavit.PartyStructOutput[], Affidavit.WitnessStructOutput[], string[]]
    ],
    "view"
  >;

  issuer: TypedContractMethod<[], [string], "view">;

  issuerIdCardNumber: TypedContractMethod<[], [string], "view">;

  issuerName: TypedContractMethod<[], [string], "view">;

  parties: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string] & {
        role: string;
        name: string;
        idCardNumber: string;
        userAddress: string;
      }
    ],
    "view"
  >;

  status: TypedContractMethod<[], [string], "view">;

  title: TypedContractMethod<[], [string], "view">;

  witnesses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string] & {
        name: string;
        idCardNumber: string;
        userAddress: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "affidavitId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "category"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createAffidavit"
  ): TypedContractMethod<
    [affidavitData: Affidavit.AffidavitDataStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createdAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dateIssued"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dateRequested"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "declaration"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "documentHashes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAffidavitBasicInfo"
  ): TypedContractMethod<
    [],
    [[string, string, string, string, string, bigint, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAffidavitDetails"
  ): TypedContractMethod<[], [[string, string, string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getAffidavitParticipants"
  ): TypedContractMethod<
    [],
    [
      [Affidavit.PartyStructOutput[], Affidavit.WitnessStructOutput[], string[]]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "issuer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "issuerIdCardNumber"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "issuerName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parties"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string] & {
        role: string;
        name: string;
        idCardNumber: string;
        userAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "title"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "witnesses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string] & {
        name: string;
        idCardNumber: string;
        userAddress: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AffidavitCreated"
  ): TypedContractEvent<
    AffidavitCreatedEvent.InputTuple,
    AffidavitCreatedEvent.OutputTuple,
    AffidavitCreatedEvent.OutputObject
  >;

  filters: {
    "AffidavitCreated(string,address,uint256)": TypedContractEvent<
      AffidavitCreatedEvent.InputTuple,
      AffidavitCreatedEvent.OutputTuple,
      AffidavitCreatedEvent.OutputObject
    >;
    AffidavitCreated: TypedContractEvent<
      AffidavitCreatedEvent.InputTuple,
      AffidavitCreatedEvent.OutputTuple,
      AffidavitCreatedEvent.OutputObject
    >;
  };
}
